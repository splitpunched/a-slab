const items = {
	namespaced: true,
	modules: {
		bridge: {
			namespaced: true,
			state: {
				unid: 0,
				name: "bridge",
				label: "Bridge",
				image: { default: 'bridge.png' },
				keyItem: true,
				placement: { type: 'freeNPC', name: 'king', },
				tracked: false,
				used: false,
			},
			getters: {
				isIncentivized: () => { return false },
				isConsumable: () => { return false },
				canDisplay: () => { return true },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isLocked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.freeBridge },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		lute: {
			namespaced: true,
			state: {
				unid: 1,
				name: "lute",
				label: "Lute",
				image: { default: 'lute.png', used: null, },
				keyItem: true,
				placement: { type: 'freeNPC', name: 'sara', },
				tracked: false,
				used: false,
				questChain: null,
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shortTemple) },
				isConsumable: () => { return false },
				canDisplay: () => { return true },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isLocked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shortTemple },
				isAccessible: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems || rootGetters['locations/sara/isAccessible'] }
			},
		},
		ship: {
			namespaced: true,
			state: {
				unid: 2,
				name: "ship",
				label: "Ship",
				image: { default: 'ship.png', used: null, },
				keyItem: true,
				placement: { type: 'freeNPC', name: 'bikke', },
				tracked: false,
				used: false,
				questChain: null,
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isConsumable: () => { return false },
				canDisplay: () => { return true },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		crown: {
			namespaced: true,
			state: {
				unid: 3,
				name: "crown",
				label: "Crown",
				image: { default: 'crown.png', used: null, },
				keyItem: true,
				placement: { type: 'treasure', name: 'marshLocked', },
				target: { name: 'astos' },
				tracked: false,
				used: false,
				questChain: [ 'crown', 'crystal', 'herb', 'key' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleFetchItems || rootGetters.flagset.incentiveFetchItems) },
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || !rootState.items.crystal.tracked) },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleTreasures },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		crystal: {
			namespaced: true,
			state: {
				unid: 3.1,
				name: "crystal",
				label: "Crystal",
				image: { default: 'crystal.png', used: null, },
				keyItem: true,
				placement: { type: 'fetchNPC', name: 'astos', },
				target: { name: 'matoya' },
				tracked: false,
				used: false,
				questChain: [ 'crown', 'crystal', 'herb', 'key' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveFetchItems },
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || (rootState.items.crystal.tracked && !rootState.items.herb.tracked)) },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		herb: {
			namespaced: true,
			state: {
				unid: 3.2,
				name: "herb",
				label: "Herb",
				image: { default: 'herb.png', used: null, },
				keyItem: true,
				placement: { type: 'fetchNPC', name: 'matoya', },
				target: { name: 'prince' },
				tracked: false,
				used: false,
				questChain: [ 'crown', 'crystal', 'herb', 'key' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveFetchItems },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || (rootState.items.herb.tracked && !rootState.items.key.tracked)) },
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		key: {
			namespaced: true,
			state: {
				unid: 3.3,
				name: "key",
				label: "Key",
				image: { default: 'key.png', used: null, },
				keyItem: true,
				placement: { type: 'fetchNPC', name: 'prince', },
				tracked: false,
				used: false,
				questChain: [ 'crown', 'crystal', 'herb', 'key' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveFetchItems },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || rootState.items.key.tracked) },
				isConsumable: () => { return false },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleNPCItems },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		tnt: {
			namespaced: true,
			state: {
				unid: 4,
				name: "tnt",
				label: "TNT",
				image: { default: 'tnt.png', used: null, },
				keyItem: true,
				placement: { type: 'treasure', name: 'coneria', },
				tracked: false,
				used: false,
				questChain: [ 'tnt', 'canal' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveFetchItems },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || !rootState.items.canal.tracked) },
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleTreasures) },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		canal: {
			namespaced: true,
			state: {
				unid: 4.1,
				name: "canal",
				label: "Canal",
				image: { default: 'canal.png', used: null, },
				keyItem: true,
				placement: { type: 'fetchNPC', name: 'nerrick', },
				tracked: false,
				used: false,
				questChain: [ 'tnt', 'canal' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveFetchItems },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || rootState.items.canal.tracked) },
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		ruby: {
			namespaced: true,
			state: {
				unid: 5,
				name: "ruby",
				label: "Ruby",
				image: { default: 'ruby.png', used: 'ruby-used.png', },
				keyItem: true,
				placement: { type: 'treasure', name: 'earth', },
				tracked: false,
				used: false,
				questChain: null
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveFetchItems },
				canDisplay: () => { return true }, // I need to figure out the best way to handle this.
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleTreasures) },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		rod: {
			namespaced: true,
			state: {
				unid: 6,
				name: "rod",
				label: "Rod",
				image: { default: 'rod.png', used: null, },
				keyItem: true,
				placement: { type: 'freeNPC', name: 'Sarda', },
				tracked: false,
				used: false,
				questChain: null
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: () => { return true }, // I need to figure out the best way to handle this.
				isConsumable: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.shuffleFetchItems },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleNPCItems) },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		canoe: {
			namespaced: true,
			state: {
				unid: 7,
				name: "canoe",
				label: "Canoe",
				image: { default: 'canoe.png', used: null, },
				keyItem: true,
				placement: { type: 'freeNPC', name: 'sage', },
				tracked: false,
				used: false,
				questChain: null
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: () => { return true }, // I need to figure out the best way to handle this.
				isConsumable: () => { return false },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleNPCItems) },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		floater: {
			namespaced: true,
			state: {
				unid: 8,
				name: "floater",
				label: "Floater",
				image: { default: 'floater.png', used: null, },
				keyItem: true,
				placement: { type: 'treasure', name: 'sage', },
				tracked: false,
				used: false,
				questChain: [ 'floater', 'airship' ],
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.freeAirship) },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.freeAirship || !rootState.items.airship.tracked) },
				isConsumable: () => { return false },
				isUsable: () => { return false },
				isLinked: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleNPCItems) },
				isLocked: () => { return false },
				isAccessible: (state, getters, rootState, rootGetters) => { return true }
			},
		},
		airship: {
			namespaced: true,
			state: {
				unid: 8.1,
				name: "airship",
				label: "Airship",
				image: { default: 'airship.png', used: null, },
				keyItem: false,
				placement: false,
				tracked: false,
				used: false,
				questChain: [ 'floater', 'airship' ],
			},
			getters: {
				isIncentivized: () => { return false },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.freeAirship || rootState.items.airship.tracked) },
				isConsumable: () => { return false },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		tail: {
			namespaced: true,
			state: {
				unid: 9,
				name: "tail",
				label: "Tail",
				image: { default: 'tail.png', used: 'tail-used.png', },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: null,
			},
			getters: {
				isIncentivized: (state, getters, rootState, rootGetters) => { return rootGetters.flagset.incentiveTail },
				canDisplay: () => { return true }, // I need to figure out the best way to handle this.
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		bottle: {
			namespaced: true,
			state: {
				unid: 10,
				name: "bottle",
				label: "Bottle",
				image: { default: 'bottle.png', used: 'bottle-used.png', },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: [ 'bottle', 'oxyale' ]
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || !rootState.items.oxyale.tracked) },
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		oxyale: {
			namespaced: true,
			state: {
				unid: 10.1,
				name: "oxyale",
				label: "Oxyale",
				image: { default: 'oxyale.png', used: null, },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: [ 'bottle', 'oxyale' ]
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || rootState.items.oxyale.tracked) },
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		slab: {
			namespaced: true,
			state: {
				unid: 11,
				name: "slab",
				label: "Slab",
				image: { default: 'slab.png', used: 'slab-used.png', },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: [ 'slab', 'chime' ]
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || !rootState.items.chime.tracked) },
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		chime: {
			namespaced: true,
			state: {
				unid: 11.2,
				name: "chime",
				label: "Chime",
				image: { default: 'chime.png', used: null },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: [ 'slab', 'chime' ]
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: (state, getters, rootState, rootGetters) => { return (rootGetters.flagset.shuffleFetchItems || rootState.items.chime.tracked) },
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		cube: {
			namespaced: true,
			state: {
				unid: 12,
				name: "cube",
				label: "Cube",
				image: { default: 'cube.png', used: null },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: null
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: () => { return true }, // I need to figure out the best way to handle this.
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		adamant: {
			namespaced: true,
			state: {
				unid: 13,
				name: "adamant",
				label: "Adamant",
				image: { default: 'adamant.png', used: null },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: null
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: () => { return true }, // I need to figure out the best way to handle this.
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
		xcalbur: {
			namespaced: true,
			state: {
				unid: 13.1,
				name: "xcalbur",
				label: "Excal",
				image: { default: 'xcalbur.png', used: null },
				keyItem: true,
				placement: false,
				tracked: false,
				used: false,
				questChain: null
			},
			getters: {
				isIncentivized: () => { return true },
				canDisplay: (state, getters, rootState, rootGetters) => { return (!rootGetters.flagset.shuffleFetchItems && rootState.items.xcalbur.tracked) },
				isConsumable: () => { return true },
				isUsable: () => { return false },
				isLinked: () => { return false },
				isLocked: () => { return false },
				isAccessible: () => { return true },
			},
		},
	}
}
